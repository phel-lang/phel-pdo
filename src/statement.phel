(ns phel\pdo\statement)

(defstruct statement [stmt])

(defn- map-key-to-keyword [row]
  (let [row (php-array-to-map row)]
    (reduce (fn [acc key]
              (put acc (keyword key) (row key)))
            {} (keys row))))

(defn fetch
  "Fetches the next row from a result set"
  [statement]
  (map-key-to-keyword
    (php/->
      (statement :stmt)
      (fetch (php/:: \PDO FETCH_ASSOC)))))

(defn fetch-column
  "Returns a single column from the next row of a result set"
  [statement & [column]]
  (php/->
    (statement :stmt)
    (fetchColumn (or column 0))))

(defn fetch-all
  "Fetches the remaining rows from a result set"
  [statement]
  (map map-key-to-keyword
    (php/->
      (statement :stmt)
      (fetchAll (php/:: \PDO FETCH_ASSOC)))))

(defn- map-key-to-string [params]
  (to-php-array (reduce (fn [acc key]
                          (put acc (format "%s" key) (params key)))
                        {} (keys params))))

(defn execute
  "Executes a prepared statement"
  [statement & [params]]
  (if (empty? params)
    (php/-> (statement :stmt) (execute))
    (let [params (map-key-to-string params)]
      (php/->
        (statement :stmt)
        (execute params))))
  statement)

(defn column-count
  "Returns the number of columns in the result set"
  [statement]
  (php/-> (statement :stmt) (columnCount)))

(defn row-count
  "Returns the number of rows affected by the last SQL statement"
  [statement]
  (php/-> (statement :stmt) (rowCount)))

(defn bind-value
  "Binds a value to a parameter"
  [statement column value & [type]]
  (php/->
    (statement :stmt)
    (bindValue (str column) value (or type (php/:: \PDO PARAM_STR))))
  statement)

(defn debug-dump-params
  "Returns an SQL prepared command"
  [statement]
  (php/ob_start)
  (php/-> (statement :stmt) (debugDumpParams))
  (php/ob_get_clean))

# not implement yet.

#PDOStatement::bindColumn — Bind a column to a PHP variable
#PDOStatement::bindParam — Binds a parameter to the specified variable name
#PDOStatement::closeCursor — Closes the cursor, enabling the statement to be executed again
#PDOStatement::errorCode — Fetch the SQLSTATE associated with the last operation on the statement handle
#PDOStatement::errorInfo — Fetch extended error information associated with the last operation on the statement handle
#PDOStatement::fetchObject — Fetches the next row and returns it as an object
#PDOStatement::getAttribute — Retrieve a statement attribute
#PDOStatement::getColumnMeta — Returns metadata for a column in a result set
#PDOStatement::getIterator — Gets result set iterator
#PDOStatement::nextRowset — Advances to the next rowset in a multi-rowset statement handle
#PDOStatement::setAttribute — Set a statement attribute
#PDOStatement::setFetchMode — Set the default fetch mode for this statement
